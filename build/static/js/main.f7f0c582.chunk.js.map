{"version":3,"sources":["components/Filter.js","components/PersonForm.js","services/persons.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","value","onChange","PersonForm","onSubmit","name","number","onNameChange","onNumberChange","type","baseUrl","axios","get","then","res","data","newPerson","post","person","put","id","delete","Persons","persons","setPersons","map","key","onClick","personToDelete","answer","window","confirm","personsService","filter","console","log","handlePersonDelete","Notification","message","isError","classes","className","App","useState","newName","setNewName","newNumber","setNewNumber","filterName","setFilterName","notification","setNotification","errorMessage","setErrorMessage","useEffect","personService","initalPersons","personsToShow","search","event","target","preventDefault","duplicatePersons","trim","length","personToUpdate","catch","err","createdPerson","response","error","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7f0c582.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <div>\r\n      filter show with:\r\n      <input value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({\r\n  onSubmit,\r\n  name,\r\n  number,\r\n  onNameChange,\r\n  onNumberChange\r\n}) => {\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <div>\r\n        name: <input value={name} onChange={onNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input value={number} onChange={onNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const req = axios.get(baseUrl);\r\n  return req.then(res => res.data);\r\n};\r\n\r\nconst create = newPerson => {\r\n  const req = axios.post(baseUrl, newPerson);\r\n  return req.then(res => res.data);\r\n};\r\n\r\nconst update = person => {\r\n  const req = axios.put(`${baseUrl}/${person.id}`, person);\r\n  return req.then(res => res.data);\r\n};\r\n\r\nconst deletePerson = id => {\r\n  const req = axios.delete(`${baseUrl}/${id}`);\r\n  return req.then(res => res.data);\r\n};\r\n\r\nexport default { getAll, create, update, deletePerson };\r\n","import React from \"react\";\r\n\r\nimport personsService from \"../services/persons\";\r\n\r\nconst Persons = ({ persons, setPersons }) => {\r\n  const handlePersonDelete = personToDelete => {\r\n    const { id, name } = personToDelete;\r\n    const answer = window.confirm(`Delete ${name}?`);\r\n    if (answer) {\r\n      personsService.deletePerson(id).then(data => {\r\n        setPersons(persons.filter(person => person.id !== id));\r\n      });\r\n    }\r\n    console.log(answer, id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {persons.map(person => (\r\n        <p key={person.name}>\r\n          {person.name} {person.number}\r\n          <button\r\n            onClick={() => {\r\n              handlePersonDelete(person);\r\n            }}\r\n          >\r\n            delete\r\n          </button>\r\n        </p>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message, isError = false }) => {\r\n  const classes = isError ? \"error\" : \"notification\";\r\n  return <p className={classes}>{message}</p>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\n\nimport personService from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filterName, setFilterName] = useState(\"\");\n  const [notification, setNotification] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then(initalPersons => {\n      setPersons(initalPersons);\n    });\n  }, []);\n\n  const handleNewNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterNameChange = event => {\n    setFilterName(event.target.value);\n  };\n\n  const handleNewPersonSubmit = event => {\n    event.preventDefault();\n    const duplicatePersons = persons.filter(\n      person => person.name === newName.trim()\n    );\n    if (duplicatePersons.length) {\n      const personToUpdate = duplicatePersons[0];\n      const replace = window.confirm(\n        `${personToUpdate.name} is already added to phonebook, replace the old number with the new one?`\n      );\n      if (replace) {\n        personToUpdate.number = newNumber;\n        personService\n          .update(personToUpdate)\n          .then(data => {\n            setPersons(\n              persons.map(person => {\n                return person.id === data.id ? data : person;\n              })\n            );\n            setNotification(`Updated ${personToUpdate.name}'s number`);\n          })\n          .catch(err => {\n            setPersons(\n              persons.filter(person => {\n                return person.id !== personToUpdate.id;\n              })\n            );\n            setErrorMessage(\n              `Information of ${personToUpdate.name}  has already been removed from the server`\n            );\n          });\n      }\n    } else {\n      const newPerson = {\n        name: newName.trim(),\n        number: newNumber.trim()\n      };\n\n      personService\n        .create(newPerson)\n        .then(createdPerson => {\n          setPersons([...persons, createdPerson]);\n          setNotification(`Added ${newName}`);\n        })\n        .catch(err => {\n          setErrorMessage(err.response.data.error);\n        });\n    }\n\n    setNewName(\"\");\n    setNewNumber(\"\");\n    setTimeout(() => {\n      setNotification(\"\");\n      setErrorMessage(\"\");\n    }, 5000);\n  };\n\n  const personsToShow = filterName\n    ? persons.filter(person => person.name.search(filterName) !== -1)\n    : persons;\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      {errorMessage ? (\n        <Notification message={errorMessage} isError={true} />\n      ) : null}\n      {notification ? <Notification message={notification} /> : null}\n\n      <Filter value={filterName} onChange={handleFilterNameChange} />\n\n      <PersonForm\n        onSubmit={handleNewPersonSubmit}\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNewNameChange}\n        onNumberChange={handleNewNumberChange}\n      />\n\n      <h2>Numbers</h2>\n\n      <Persons persons={personsToShow} setPersons={setPersons} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}